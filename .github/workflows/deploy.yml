name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

      - name: Clonar el Repositorio de Helm Charts
        uses: actions/checkout@v3
        with:
          repository: Ayala217/Helm-Chart
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: Helm-Chart

      - name: Clonar el Microservicio Chart
        uses: actions/checkout@v3
        with:
          repository: Jd1ego/MicroservicioChart
          ref: main
          path: microservicio_chart

      - name: Verificar archivos después del checkout
        run: ls -la

      - name: Instalar Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Determinar la nueva versión del Chart
        run: |
          cd Helm-Chart
          
          # Obtener la última versión de `index.yaml`
          LAST_VERSION=$(grep -oP 'version: \K[\d.]+' index.yaml | sort -V | tail -1)
          echo "Última versión encontrada: $LAST_VERSION"

          # Incrementar la versión (minor)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
          NEW_VERSION="$MAJOR.$((MINOR+1)).0"
          echo "Nueva versión: $NEW_VERSION"

          # Guardar en variables de entorno
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Eliminar la versión anterior del paquete
        run: |
          cd Helm-Chart
          
          # Buscar y eliminar la versión anterior
          OLD_PACKAGE=$(ls | grep "microservicio-chart-.*.tgz" || echo "")
          if [ -n "$OLD_PACKAGE" ]; then
            echo "Eliminando paquete anterior: $OLD_PACKAGE"
            rm -f "$OLD_PACKAGE"
          else
            echo "⚠️ No se encontró un paquete anterior, continuando..."
          fi

      - name: Empaquetar el Helm Chart con la nueva versión
        run: |
          cd microservicio_chart

          # Modificar `Chart.yaml` con la nueva versión
          sed -i "s/version:.*/version: $NEW_VERSION/" Chart.yaml

          # Empaquetar el Helm Chart
          helm package . -d ../Helm-Chart

      - name: Validar reemplazo del paquete
        run: |
          cd Helm-Chart
          ls -la | grep "microservicio-chart-$NEW_VERSION.tgz" || echo "⚠️ No se encontró el paquete"

      - name: Actualizar el índice del Helm Chart
        run: |
          cd Helm-Chart
          
          # Eliminar la entrada anterior del `index.yaml`
          sed -i "/- name: microservicio-chart/,/version:/d" index.yaml
          
          # Regenerar el índice con la nueva versión
          helm repo index . --url https://Ayala217.github.io/Helm-Chart

          # Verificar contenido del índice
          cat index.yaml

      - name: Subir cambios a GitHub
        run: |
          cd Helm-Chart
          
          # Agregar y hacer commit solo si hay cambios
          git add .
          git diff --cached --quiet || git commit -m "Actualizar Helm Chart con la versión $NEW_VERSION"
          
          # Hacer push con reintento en caso de error
          git push origin main || (echo "⚠️ Primer push fallido, intentando de nuevo..." && sleep 5 && git push origin main)
